(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ng2-input-autocomplete', ['exports', '@angular/core', '@angular/common', '@angular/forms'], factory) :
    (factory((global['ng2-input-autocomplete'] = {}),global.ng.core,global.ng.common,global.ng.forms));
}(this, (function (exports,core,common,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AutocompleteComponent = /** @class */ (function () {
        function AutocompleteComponent(elementRef) {
            this.selectEvent = new core.EventEmitter();
            this.inputChangedEvent = new core.EventEmitter();
            this.thisElement = elementRef.nativeElement;
            this.selectedIndex = 0;
            this.showAutoComplete = false;
            this.value = '';
        }
        /**
         * @return {?}
         */
        AutocompleteComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.placeholder = 'autocomplete';
                this.inputElement = /** @type {?} */ (this.thisElement.querySelector('input'));
                if (!this.isNull(this.config)) {
                    if (!this.isNull(this.config.placeholder)) {
                        this.placeholder = this.config.placeholder;
                    }
                    if (!this.isNull(this.config.sourceField)) {
                        this.sourceField = this.config.sourceField;
                    }
                }
                this.filterItems(this.value);
                this.inputElement.focus();
            };
        /**
         * @return {?}
         */
        AutocompleteComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.filterItems(this.value);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AutocompleteComponent.prototype.enterText = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var total = this.candidates.length;
                switch (event.keyCode) {
                    case 27:
                        this.showAutoComplete = false;
                        break;
                    case 38:
                        this.selectedIndex = (total + this.selectedIndex - 1) % total;
                        break;
                    case 40:
                        this.selectedIndex = (total + this.selectedIndex + 1) % total;
                        break;
                    case 13:
                        if (this.candidates.length > 0) {
                            this.onSelect(this.selectedIndex);
                        }
                        event.preventDefault();
                        break;
                    default:
                        this.value = event.target.value;
                        this.inputChangedEvent.emit(this.value);
                        break;
                }
            };
        /**
         * @param {?} idx
         * @return {?}
         */
        AutocompleteComponent.prototype.onSelect = /**
         * @param {?} idx
         * @return {?}
         */
            function (idx) {
                this.showAutoComplete = false;
                this.value = this.candiatesLabels[idx];
                this.selectEvent.emit(this.candidates[idx]);
            };
        /**
         * @param {?} search
         * @return {?}
         */
        AutocompleteComponent.prototype.filterItems = /**
         * @param {?} search
         * @return {?}
         */
            function (search) {
                /** @type {?} */
                var field = this.sourceField;
                /** @type {?} */
                var filterItem = this.filterItem;
                if (this.items) {
                    this.candidates = this.items.filter(function (item) {
                        return filterItem(item, field, search);
                    });
                    this.buildLabels();
                }
            };
        /**
         * @param {?} object
         * @param {?} path
         * @return {?}
         */
        AutocompleteComponent.prototype.getFieldValue = /**
         * @param {?} object
         * @param {?} path
         * @return {?}
         */
            function (object, path) {
                if (typeof object === 'string') {
                    return object;
                }
                if (path instanceof Array) {
                    /** @type {?} */
                    var result_1 = object;
                    path.forEach(function (element) {
                        if (result_1 !== null &&
                            result_1 !== undefined &&
                            result_1[element] !== null &&
                            result_1[element] !== undefined) {
                            result_1 = result_1[element];
                        }
                        else {
                            result_1 = '';
                        }
                    });
                    return result_1;
                }
                else {
                    return object[path] || '';
                }
            };
        /**
         * @param {?} object
         * @return {?}
         */
        AutocompleteComponent.prototype.isNull = /**
         * @param {?} object
         * @return {?}
         */
            function (object) {
                return object === null || object === undefined;
            };
        /**
         * @return {?}
         */
        AutocompleteComponent.prototype.buildLabels = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var field = this.sourceField;
                /** @type {?} */
                var getFieldValue = this.getFieldValue;
                this.candiatesLabels = this.candidates.map(function (e) {
                    return getFieldValue(e, field);
                });
            };
        /**
         * @param {?} item
         * @param {?} path
         * @param {?} search
         * @return {?}
         */
        AutocompleteComponent.prototype.filterItem = /**
         * @param {?} item
         * @param {?} path
         * @param {?} search
         * @return {?}
         */
            function (item, path, search) {
                if (search === null || search === undefined || search.length === 0) {
                    return true;
                }
                /** @type {?} */
                var result;
                if (typeof item === 'string') {
                    result = item;
                }
                else if (path instanceof Array) {
                    result = item;
                    path.forEach(function (element) {
                        if (result !== null &&
                            result !== undefined &&
                            result[element] !== null &&
                            result[element] !== undefined) {
                            result = result[element];
                        }
                        else {
                            result = '';
                        }
                    });
                }
                else {
                    result = item[path] || '';
                }
                return result.toLowerCase().indexOf(search.toLowerCase()) >= 0;
            };
        AutocompleteComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line
                        selector: 'ng2-input-autocomplete',
                        template: "\n  <div class=\"autocomplete\">\n    <input type=\"text\"\n      placeholder=\"{{placeholder}}\"\n      (blur)=\"showAutoComplete = false;\"\n      (focus)=\"showAutoComplete = true;\"\n      [value]=\"value\"\n      (keyup)=\"enterText($event)\">\n    <ul *ngIf=\"showAutoComplete && candidates && candidates.length > 0\">\n      <li *ngFor=\"let candidate of candidates; let idx = index\"\n        [ngClass]=\"{ active: (idx === selectedIndex) }\"\n        (mouseover)=\"selectedIndex = idx;\"\n        (mousedown)=\"onSelect(idx)\">\n        {{candiatesLabels[idx]}}\n      </li>\n    </ul>\n  </div>",
                        styles: [".autocomplete ul {\n       position: absolute;\n       left: 0;\n       width: 100%;\n       border-left: 1px solid #888;\n       border-right: 1px solid #888;\n       border-bottom: 1px solid #888;\n       list-style: none;\n       padding-left: 0px;\n       margin-top: 2px;\n       background-color: #fff;\n       z-index: 100;\n     }\n     .autocomplete li {\n       text-align: left;\n       list-style: none;\n       width: 100%;\n       padding: 0.4em 0 0.4em 0;\n     }\n     .autocomplete li.active {\n       width: 100%;\n       background-color: #4bf;\n     }\n\n     .autocomplete .highlight {\n       background-color: #e2e2e2;\n     }\n     .autocomplete li.active .highlight {\n       background: #666;\n       color: #fff;\n     }"]
                    }] }
        ];
        /** @nocollapse */
        AutocompleteComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        AutocompleteComponent.propDecorators = {
            items: [{ type: core.Input }],
            config: [{ type: core.Input }],
            selectEvent: [{ type: core.Output }],
            inputChangedEvent: [{ type: core.Output }]
        };
        return AutocompleteComponent;
    }());
    var AutocompleteDirective = /** @class */ (function () {
        function AutocompleteDirective(resolver, viewContainerRef) {
            var _this = this;
            this.resolver = resolver;
            this.viewContainerRef = viewContainerRef;
            this.ngModelChange = new core.EventEmitter();
            this.inputChangedEvent = new core.EventEmitter();
            this.selectEvent = new core.EventEmitter();
            this.hideAutocomplete = function (event) {
                if (!_this.componentRef) {
                    return;
                }
                if (!event ||
                    (event.target !== _this.thisElement && event.type === 'click')) {
                    _this.componentRef.destroy();
                    _this.componentRef = undefined;
                }
                if (_this.inputElement['tabIndex'] < 0) {
                    _this.inputElement['tabIndex'] = _this.tabIndex;
                }
            };
            this.onInputChanged = function (val) {
                _this.inputElement.value = val;
                if (val !== _this.ngModel) {
                    _this.ngModelChange.emit(val);
                }
                /** @type {?} */
                var component = _this.componentRef.instance;
                component.filterItems(val);
                _this.inputChangedEvent.emit(val);
            };
            this.onSelect = function (item) {
                /** @type {?} */
                var component = _this.componentRef.instance;
                /** @type {?} */
                var val = component.value;
                if (val !== _this.ngModel) {
                    _this.ngModelChange.emit(val);
                }
                _this.selectEvent.emit(item);
                if (_this.inputElement) {
                    _this.inputElement.value = '' + val;
                }
                _this.hideAutocomplete();
            };
            this.thisElement = this.viewContainerRef.element.nativeElement;
        }
        /**
         * @return {?}
         */
        AutocompleteDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.thisElement.tagName.toLowerCase() === 'form') {
                    return;
                }
                this.createDiv();
            };
        /**
         * @return {?}
         */
        AutocompleteDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.componentRef) {
                    this.componentRef.instance.selectEvent.unsubscribe();
                    this.componentRef.instance.inputChangedEvent.unsubscribe();
                }
                document.removeEventListener('click', this.hideAutocomplete);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        AutocompleteDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['items'] && this.componentRef) {
                    /** @type {?} */
                    var component = this.componentRef.instance;
                    component.items = changes['items'].currentValue;
                    component.filterItems(component.value);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AutocompleteDirective.prototype.showAutocomplete = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.hideAutocomplete();
                if (event === this.thisElement) {
                    this.createAutocomplete();
                }
            };
        /**
         * @return {?}
         */
        AutocompleteDirective.prototype.createDiv = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var element = document.createElement('div');
                element.style.display = 'inline-block';
                element.style.position = 'relative';
                this.thisElement.parentElement.insertBefore(element, this.thisElement.nextSibling);
                element.appendChild(this.thisElement);
                document.addEventListener('click', this.hideAutocomplete);
            };
        /**
         * @return {?}
         */
        AutocompleteDirective.prototype.createAutocomplete = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var factory = this.resolver.resolveComponentFactory(AutocompleteComponent);
                this.componentRef = this.viewContainerRef.createComponent(factory);
                /** @type {?} */
                var component = this.componentRef.instance;
                component.config = this.config;
                component.items = this.items;
                component.selectEvent.subscribe(this.onSelect);
                component.inputChangedEvent.subscribe(this.onInputChanged);
                this.autocompleteElement = this.componentRef.location.nativeElement;
                this.autocompleteElement.style.display = 'none';
                this.inputElement = /** @type {?} */ (this.thisElement);
                if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {
                    this.inputElement = /** @type {?} */ (this.thisElement.querySelector('input'));
                    this.inputElement.parentElement.insertBefore(this.autocompleteElement, this.inputElement.nextSibling);
                }
                component.value = this.inputElement.value;
                this.tabIndex = this.inputElement['tabIndex'];
                this.inputElement['tabIndex'] = -100;
                if (this.componentRef) {
                    /** @type {?} */
                    var rect = this.thisElement.getBoundingClientRect();
                    /** @type {?} */
                    var style = this.autocompleteElement.style;
                    style.width = rect.width + 'px';
                    style.position = 'absolute';
                    style.zIndex = '1';
                    style.top = '0';
                    style.left = '0';
                    style.display = 'inline-block';
                }
            };
        AutocompleteDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line
                        selector: '[autocomplete]'
                    },] }
        ];
        /** @nocollapse */
        AutocompleteDirective.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver },
                { type: core.ViewContainerRef }
            ];
        };
        AutocompleteDirective.propDecorators = {
            config: [{ type: core.Input }],
            items: [{ type: core.Input }],
            ngModel: [{ type: core.Input }],
            ngModelChange: [{ type: core.Output }],
            inputChangedEvent: [{ type: core.Output }],
            selectEvent: [{ type: core.Output }],
            showAutocomplete: [{ type: core.HostListener, args: ['click', ['$event.target'],] }, { type: core.HostListener, args: ['focus', ['$event.target'],] }]
        };
        return AutocompleteDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AutocompleteModule = /** @class */ (function () {
        function AutocompleteModule() {
        }
        /**
         * @return {?}
         */
        AutocompleteModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: AutocompleteModule
                };
            };
        AutocompleteModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule],
                        declarations: [AutocompleteComponent, AutocompleteDirective],
                        exports: [AutocompleteComponent, AutocompleteDirective],
                        entryComponents: [AutocompleteComponent]
                    },] }
        ];
        return AutocompleteModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.AutocompleteComponent = AutocompleteComponent;
    exports.AutocompleteDirective = AutocompleteDirective;
    exports.AutocompleteModule = AutocompleteModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,