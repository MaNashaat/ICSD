import { Component, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, HostListener, Input, Output, ViewContainerRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class AutocompleteComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.selectEvent = new EventEmitter();
        this.inputChangedEvent = new EventEmitter();
        this.thisElement = elementRef.nativeElement;
        this.selectedIndex = 0;
        this.showAutoComplete = false;
        this.value = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.placeholder = 'autocomplete';
        this.inputElement = /** @type {?} */ (this.thisElement.querySelector('input'));
        if (!this.isNull(this.config)) {
            if (!this.isNull(this.config.placeholder)) {
                this.placeholder = this.config.placeholder;
            }
            if (!this.isNull(this.config.sourceField)) {
                this.sourceField = this.config.sourceField;
            }
        }
        this.filterItems(this.value);
        this.inputElement.focus();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.filterItems(this.value);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    enterText(event) {
        /** @type {?} */
        const total = this.candidates.length;
        switch (event.keyCode) {
            case 27:
                this.showAutoComplete = false;
                break;
            case 38:
                this.selectedIndex = (total + this.selectedIndex - 1) % total;
                break;
            case 40:
                this.selectedIndex = (total + this.selectedIndex + 1) % total;
                break;
            case 13:
                if (this.candidates.length > 0) {
                    this.onSelect(this.selectedIndex);
                }
                event.preventDefault();
                break;
            default:
                this.value = event.target.value;
                this.inputChangedEvent.emit(this.value);
                break;
        }
    }
    /**
     * @param {?} idx
     * @return {?}
     */
    onSelect(idx) {
        this.showAutoComplete = false;
        this.value = this.candiatesLabels[idx];
        this.selectEvent.emit(this.candidates[idx]);
    }
    /**
     * @param {?} search
     * @return {?}
     */
    filterItems(search) {
        /** @type {?} */
        const field = this.sourceField;
        /** @type {?} */
        const filterItem = this.filterItem;
        if (this.items) {
            this.candidates = this.items.filter(item => {
                return filterItem(item, field, search);
            });
            this.buildLabels();
        }
    }
    /**
     * @param {?} object
     * @param {?} path
     * @return {?}
     */
    getFieldValue(object, path) {
        if (typeof object === 'string') {
            return object;
        }
        if (path instanceof Array) {
            /** @type {?} */
            let result = object;
            path.forEach((element) => {
                if (result !== null &&
                    result !== undefined &&
                    result[element] !== null &&
                    result[element] !== undefined) {
                    result = result[element];
                }
                else {
                    result = '';
                }
            });
            return result;
        }
        else {
            return object[path] || '';
        }
    }
    /**
     * @param {?} object
     * @return {?}
     */
    isNull(object) {
        return object === null || object === undefined;
    }
    /**
     * @return {?}
     */
    buildLabels() {
        /** @type {?} */
        const field = this.sourceField;
        /** @type {?} */
        const getFieldValue = this.getFieldValue;
        this.candiatesLabels = this.candidates.map((e) => getFieldValue(e, field));
    }
    /**
     * @param {?} item
     * @param {?} path
     * @param {?} search
     * @return {?}
     */
    filterItem(item, path, search) {
        if (search === null || search === undefined || search.length === 0) {
            return true;
        }
        /** @type {?} */
        let result;
        if (typeof item === 'string') {
            result = item;
        }
        else if (path instanceof Array) {
            result = item;
            path.forEach((element) => {
                if (result !== null &&
                    result !== undefined &&
                    result[element] !== null &&
                    result[element] !== undefined) {
                    result = result[element];
                }
                else {
                    result = '';
                }
            });
        }
        else {
            result = item[path] || '';
        }
        return result.toLowerCase().indexOf(search.toLowerCase()) >= 0;
    }
}
AutocompleteComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line
                selector: 'ng2-input-autocomplete',
                template: `
  <div class="autocomplete">
    <input type="text"
      placeholder="{{placeholder}}"
      (blur)="showAutoComplete = false;"
      (focus)="showAutoComplete = true;"
      [value]="value"
      (keyup)="enterText($event)">
    <ul *ngIf="showAutoComplete && candidates && candidates.length > 0">
      <li *ngFor="let candidate of candidates; let idx = index"
        [ngClass]="{ active: (idx === selectedIndex) }"
        (mouseover)="selectedIndex = idx;"
        (mousedown)="onSelect(idx)">
        {{candiatesLabels[idx]}}
      </li>
    </ul>
  </div>`,
                styles: [`.autocomplete ul {
       position: absolute;
       left: 0;
       width: 100%;
       border-left: 1px solid #888;
       border-right: 1px solid #888;
       border-bottom: 1px solid #888;
       list-style: none;
       padding-left: 0px;
       margin-top: 2px;
       background-color: #fff;
       z-index: 100;
     }
     .autocomplete li {
       text-align: left;
       list-style: none;
       width: 100%;
       padding: 0.4em 0 0.4em 0;
     }
     .autocomplete li.active {
       width: 100%;
       background-color: #4bf;
     }

     .autocomplete .highlight {
       background-color: #e2e2e2;
     }
     .autocomplete li.active .highlight {
       background: #666;
       color: #fff;
     }`]
            }] }
];
/** @nocollapse */
AutocompleteComponent.ctorParameters = () => [
    { type: ElementRef }
];
AutocompleteComponent.propDecorators = {
    items: [{ type: Input }],
    config: [{ type: Input }],
    selectEvent: [{ type: Output }],
    inputChangedEvent: [{ type: Output }]
};
class AutocompleteDirective {
    /**
     * @param {?} resolver
     * @param {?} viewContainerRef
     */
    constructor(resolver, viewContainerRef) {
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
        this.ngModelChange = new EventEmitter();
        this.inputChangedEvent = new EventEmitter();
        this.selectEvent = new EventEmitter();
        this.hideAutocomplete = (event) => {
            if (!this.componentRef) {
                return;
            }
            if (!event ||
                (event.target !== this.thisElement && event.type === 'click')) {
                this.componentRef.destroy();
                this.componentRef = undefined;
            }
            if (this.inputElement['tabIndex'] < 0) {
                this.inputElement['tabIndex'] = this.tabIndex;
            }
        };
        this.onInputChanged = (val) => {
            this.inputElement.value = val;
            if (val !== this.ngModel) {
                this.ngModelChange.emit(val);
            }
            /** @type {?} */
            const component = this.componentRef.instance;
            component.filterItems(val);
            this.inputChangedEvent.emit(val);
        };
        this.onSelect = (item) => {
            /** @type {?} */
            const component = this.componentRef.instance;
            /** @type {?} */
            const val = component.value;
            if (val !== this.ngModel) {
                this.ngModelChange.emit(val);
            }
            this.selectEvent.emit(item);
            if (this.inputElement) {
                this.inputElement.value = '' + val;
            }
            this.hideAutocomplete();
        };
        this.thisElement = this.viewContainerRef.element.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.thisElement.tagName.toLowerCase() === 'form') {
            return;
        }
        this.createDiv();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.componentRef) {
            this.componentRef.instance.selectEvent.unsubscribe();
            this.componentRef.instance.inputChangedEvent.unsubscribe();
        }
        document.removeEventListener('click', this.hideAutocomplete);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['items'] && this.componentRef) {
            /** @type {?} */
            const component = this.componentRef.instance;
            component.items = changes['items'].currentValue;
            component.filterItems(component.value);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showAutocomplete(event) {
        this.hideAutocomplete();
        if (event === this.thisElement) {
            this.createAutocomplete();
        }
    }
    /**
     * @return {?}
     */
    createDiv() {
        /** @type {?} */
        const element = document.createElement('div');
        element.style.display = 'inline-block';
        element.style.position = 'relative';
        this.thisElement.parentElement.insertBefore(element, this.thisElement.nextSibling);
        element.appendChild(this.thisElement);
        document.addEventListener('click', this.hideAutocomplete);
    }
    /**
     * @return {?}
     */
    createAutocomplete() {
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(AutocompleteComponent);
        this.componentRef = this.viewContainerRef.createComponent(factory);
        /** @type {?} */
        const component = this.componentRef.instance;
        component.config = this.config;
        component.items = this.items;
        component.selectEvent.subscribe(this.onSelect);
        component.inputChangedEvent.subscribe(this.onInputChanged);
        this.autocompleteElement = this.componentRef.location.nativeElement;
        this.autocompleteElement.style.display = 'none';
        this.inputElement = /** @type {?} */ (this.thisElement);
        if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {
            this.inputElement = /** @type {?} */ (this.thisElement.querySelector('input'));
            this.inputElement.parentElement.insertBefore(this.autocompleteElement, this.inputElement.nextSibling);
        }
        component.value = this.inputElement.value;
        this.tabIndex = this.inputElement['tabIndex'];
        this.inputElement['tabIndex'] = -100;
        if (this.componentRef) {
            /** @type {?} */
            const rect = this.thisElement.getBoundingClientRect();
            /** @type {?} */
            const style = this.autocompleteElement.style;
            style.width = rect.width + 'px';
            style.position = 'absolute';
            style.zIndex = '1';
            style.top = '0';
            style.left = '0';
            style.display = 'inline-block';
        }
    }
}
AutocompleteDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line
                selector: '[autocomplete]'
            },] }
];
/** @nocollapse */
AutocompleteDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef }
];
AutocompleteDirective.propDecorators = {
    config: [{ type: Input }],
    items: [{ type: Input }],
    ngModel: [{ type: Input }],
    ngModelChange: [{ type: Output }],
    inputChangedEvent: [{ type: Output }],
    selectEvent: [{ type: Output }],
    showAutocomplete: [{ type: HostListener, args: ['click', ['$event.target'],] }, { type: HostListener, args: ['focus', ['$event.target'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class AutocompleteModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AutocompleteModule
        };
    }
}
AutocompleteModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [AutocompleteComponent, AutocompleteDirective],
                exports: [AutocompleteComponent, AutocompleteDirective],
                entryComponents: [AutocompleteComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { AutocompleteComponent, AutocompleteDirective, AutocompleteModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLWlucHV0LWF1dG9jb21wbGV0ZS5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmcyLWlucHV0LWF1dG9jb21wbGV0ZS9saWIvYXV0b2NvbXBsZXRlLmNvbXBvbmVudC50cyIsIm5nOi8vbmcyLWlucHV0LWF1dG9jb21wbGV0ZS9saWIvYXV0b2NvbXBsZXRlLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICBNSVQgTElDRU5TRSBAbGl1eTk3XG4qL1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIENvbXBvbmVudFJlZixcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE5nTW9kdWxlLFxuICBNb2R1bGVXaXRoUHJvdmlkZXJzLFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFNpbXBsZUNoYW5nZSxcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gIHNlbGVjdG9yOiAnbmcyLWlucHV0LWF1dG9jb21wbGV0ZScsXG4gIHRlbXBsYXRlOiBgXG4gIDxkaXYgY2xhc3M9XCJhdXRvY29tcGxldGVcIj5cbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIlxuICAgICAgcGxhY2Vob2xkZXI9XCJ7e3BsYWNlaG9sZGVyfX1cIlxuICAgICAgKGJsdXIpPVwic2hvd0F1dG9Db21wbGV0ZSA9IGZhbHNlO1wiXG4gICAgICAoZm9jdXMpPVwic2hvd0F1dG9Db21wbGV0ZSA9IHRydWU7XCJcbiAgICAgIFt2YWx1ZV09XCJ2YWx1ZVwiXG4gICAgICAoa2V5dXApPVwiZW50ZXJUZXh0KCRldmVudClcIj5cbiAgICA8dWwgKm5nSWY9XCJzaG93QXV0b0NvbXBsZXRlICYmIGNhbmRpZGF0ZXMgJiYgY2FuZGlkYXRlcy5sZW5ndGggPiAwXCI+XG4gICAgICA8bGkgKm5nRm9yPVwibGV0IGNhbmRpZGF0ZSBvZiBjYW5kaWRhdGVzOyBsZXQgaWR4ID0gaW5kZXhcIlxuICAgICAgICBbbmdDbGFzc109XCJ7IGFjdGl2ZTogKGlkeCA9PT0gc2VsZWN0ZWRJbmRleCkgfVwiXG4gICAgICAgIChtb3VzZW92ZXIpPVwic2VsZWN0ZWRJbmRleCA9IGlkeDtcIlxuICAgICAgICAobW91c2Vkb3duKT1cIm9uU2VsZWN0KGlkeClcIj5cbiAgICAgICAge3tjYW5kaWF0ZXNMYWJlbHNbaWR4XX19XG4gICAgICA8L2xpPlxuICAgIDwvdWw+XG4gIDwvZGl2PmAsXG4gIHN0eWxlczogW1xuICAgIGAuYXV0b2NvbXBsZXRlIHVsIHtcbiAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgbGVmdDogMDtcbiAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICM4ODg7XG4gICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgIzg4ODtcbiAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzg4ODtcbiAgICAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgICAgIHBhZGRpbmctbGVmdDogMHB4O1xuICAgICAgIG1hcmdpbi10b3A6IDJweDtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgIHotaW5kZXg6IDEwMDtcbiAgICAgfVxuICAgICAuYXV0b2NvbXBsZXRlIGxpIHtcbiAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgcGFkZGluZzogMC40ZW0gMCAwLjRlbSAwO1xuICAgICB9XG4gICAgIC5hdXRvY29tcGxldGUgbGkuYWN0aXZlIHtcbiAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGJmO1xuICAgICB9XG5cbiAgICAgLmF1dG9jb21wbGV0ZSAuaGlnaGxpZ2h0IHtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTJlMmUyO1xuICAgICB9XG4gICAgIC5hdXRvY29tcGxldGUgbGkuYWN0aXZlIC5oaWdobGlnaHQge1xuICAgICAgIGJhY2tncm91bmQ6ICM2NjY7XG4gICAgICAgY29sb3I6ICNmZmY7XG4gICAgIH1gXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQXV0b2NvbXBsZXRlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBpdGVtczogYW55W107XG4gIEBJbnB1dCgpIGNvbmZpZzogYW55O1xuICBAT3V0cHV0KCkgc2VsZWN0RXZlbnQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBpbnB1dENoYW5nZWRFdmVudDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgaW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xuICB2YWx1ZTogc3RyaW5nO1xuICBjYW5kaWRhdGVzOiBhbnlbXTtcbiAgY2FuZGlhdGVzTGFiZWxzOiBhbnlbXTtcbiAgc2VsZWN0ZWRJbmRleDogbnVtYmVyO1xuICBzaG93QXV0b0NvbXBsZXRlOiBib29sZWFuO1xuICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICBwcml2YXRlIHNvdXJjZUZpZWxkOiBhbnk7XG4gIHByaXZhdGUgdGhpc0VsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICB0aGlzLnRoaXNFbGVtZW50ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgdGhpcy5zaG93QXV0b0NvbXBsZXRlID0gZmFsc2U7XG4gICAgdGhpcy52YWx1ZSA9ICcnO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5wbGFjZWhvbGRlciA9ICdhdXRvY29tcGxldGUnO1xuICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy50aGlzRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgJ2lucHV0J1xuICAgICkgYXMgSFRNTElucHV0RWxlbWVudDtcblxuICAgIGlmICghdGhpcy5pc051bGwodGhpcy5jb25maWcpKSB7XG4gICAgICBpZiAoIXRoaXMuaXNOdWxsKHRoaXMuY29uZmlnLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5jb25maWcucGxhY2Vob2xkZXI7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaXNOdWxsKHRoaXMuY29uZmlnLnNvdXJjZUZpZWxkKSkge1xuICAgICAgICB0aGlzLnNvdXJjZUZpZWxkID0gdGhpcy5jb25maWcuc291cmNlRmllbGQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZmlsdGVySXRlbXModGhpcy52YWx1ZSk7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQuZm9jdXMoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuZmlsdGVySXRlbXModGhpcy52YWx1ZSk7XG4gIH1cblxuICBlbnRlclRleHQoZXZlbnQ6IGFueSkge1xuICAgIGNvbnN0IHRvdGFsID0gdGhpcy5jYW5kaWRhdGVzLmxlbmd0aDtcbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgIGNhc2UgMjc6XG4gICAgICAgIHRoaXMuc2hvd0F1dG9Db21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9ICh0b3RhbCArIHRoaXMuc2VsZWN0ZWRJbmRleCAtIDEpICUgdG90YWw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0MDpcbiAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gKHRvdGFsICsgdGhpcy5zZWxlY3RlZEluZGV4ICsgMSkgJSB0b3RhbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEzOlxuICAgICAgICBpZiAodGhpcy5jYW5kaWRhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLm9uU2VsZWN0KHRoaXMuc2VsZWN0ZWRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLnZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICB0aGlzLmlucHV0Q2hhbmdlZEV2ZW50LmVtaXQodGhpcy52YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIG9uU2VsZWN0KGlkeDogbnVtYmVyKSB7XG4gICAgdGhpcy5zaG93QXV0b0NvbXBsZXRlID0gZmFsc2U7XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMuY2FuZGlhdGVzTGFiZWxzW2lkeF07XG4gICAgdGhpcy5zZWxlY3RFdmVudC5lbWl0KHRoaXMuY2FuZGlkYXRlc1tpZHhdKTtcbiAgfVxuXG4gIGZpbHRlckl0ZW1zKHNlYXJjaDogc3RyaW5nKSB7XG4gICAgY29uc3QgZmllbGQgPSB0aGlzLnNvdXJjZUZpZWxkO1xuICAgIGNvbnN0IGZpbHRlckl0ZW0gPSB0aGlzLmZpbHRlckl0ZW07XG4gICAgaWYgKHRoaXMuaXRlbXMpIHtcbiAgICAgIHRoaXMuY2FuZGlkYXRlcyA9IHRoaXMuaXRlbXMuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICByZXR1cm4gZmlsdGVySXRlbShpdGVtLCBmaWVsZCwgc2VhcmNoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5idWlsZExhYmVscygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0RmllbGRWYWx1ZShvYmplY3Q6IGFueSwgcGF0aDogYW55KSB7XG4gICAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cbiAgICBpZiAocGF0aCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBsZXQgcmVzdWx0OiBhbnkgPSBvYmplY3Q7XG4gICAgICBwYXRoLmZvckVhY2goKGVsZW1lbnQ6IGFueSkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgcmVzdWx0ICE9PSBudWxsICYmXG4gICAgICAgICAgcmVzdWx0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICByZXN1bHRbZWxlbWVudF0gIT09IG51bGwgJiZcbiAgICAgICAgICByZXN1bHRbZWxlbWVudF0gIT09IHVuZGVmaW5lZFxuICAgICAgICApIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHRbZWxlbWVudF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9iamVjdFtwYXRoXSB8fCAnJztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGlzTnVsbChvYmplY3Q6IGFueSkge1xuICAgIHJldHVybiBvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkTGFiZWxzKCkge1xuICAgIGNvbnN0IGZpZWxkID0gdGhpcy5zb3VyY2VGaWVsZDtcbiAgICBjb25zdCBnZXRGaWVsZFZhbHVlID0gdGhpcy5nZXRGaWVsZFZhbHVlO1xuICAgIHRoaXMuY2FuZGlhdGVzTGFiZWxzID0gdGhpcy5jYW5kaWRhdGVzLm1hcCgoZTogYW55KSA9PlxuICAgICAgZ2V0RmllbGRWYWx1ZShlLCBmaWVsZClcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJJdGVtKGl0ZW06IGFueSwgcGF0aDogYW55LCBzZWFyY2g6IHN0cmluZykge1xuICAgIGlmIChzZWFyY2ggPT09IG51bGwgfHwgc2VhcmNoID09PSB1bmRlZmluZWQgfHwgc2VhcmNoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCByZXN1bHQ6IGFueTtcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHQgPSBpdGVtO1xuICAgIH0gZWxzZSBpZiAocGF0aCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICByZXN1bHQgPSBpdGVtO1xuICAgICAgcGF0aC5mb3JFYWNoKChlbGVtZW50OiBhbnkpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHJlc3VsdCAhPT0gbnVsbCAmJlxuICAgICAgICAgIHJlc3VsdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgcmVzdWx0W2VsZW1lbnRdICE9PSBudWxsICYmXG4gICAgICAgICAgcmVzdWx0W2VsZW1lbnRdICE9PSB1bmRlZmluZWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W2VsZW1lbnRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9ICcnO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gaXRlbVtwYXRoXSB8fCAnJztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoLnRvTG93ZXJDYXNlKCkpID49IDA7XG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICBzZWxlY3RvcjogJ1thdXRvY29tcGxldGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBBdXRvY29tcGxldGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgY29uZmlnOiBhbnk7XG4gIEBJbnB1dCgpIGl0ZW1zOiBhbnk7XG4gIEBJbnB1dCgpIG5nTW9kZWw6IHN0cmluZztcbiAgQE91dHB1dCgpIG5nTW9kZWxDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBpbnB1dENoYW5nZWRFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIHNlbGVjdEV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHByaXZhdGUgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8QXV0b2NvbXBsZXRlQ29tcG9uZW50PjtcbiAgcHJpdmF0ZSB0aGlzRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgYXV0b2NvbXBsZXRlRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgaW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xuICBwcml2YXRlIHRhYkluZGV4OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIHB1YmxpYyB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge1xuICAgIHRoaXMudGhpc0VsZW1lbnQgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMudGhpc0VsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnZm9ybScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jcmVhdGVEaXYoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZikge1xuICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2Uuc2VsZWN0RXZlbnQudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmlucHV0Q2hhbmdlZEV2ZW50LnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oaWRlQXV0b2NvbXBsZXRlKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHsgW3Byb3BLZXk6IHN0cmluZ106IFNpbXBsZUNoYW5nZSB9KSB7XG4gICAgaWYgKGNoYW5nZXNbJ2l0ZW1zJ10gJiYgdGhpcy5jb21wb25lbnRSZWYpIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlO1xuICAgICAgY29tcG9uZW50Lml0ZW1zID0gY2hhbmdlc1snaXRlbXMnXS5jdXJyZW50VmFsdWU7XG4gICAgICBjb21wb25lbnQuZmlsdGVySXRlbXMoY29tcG9uZW50LnZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50LnRhcmdldCddKVxuICBASG9zdExpc3RlbmVyKCdmb2N1cycsIFsnJGV2ZW50LnRhcmdldCddKVxuICBzaG93QXV0b2NvbXBsZXRlKGV2ZW50OiBhbnkpIHtcbiAgICB0aGlzLmhpZGVBdXRvY29tcGxldGUoKTtcbiAgICBpZiAoZXZlbnQgPT09IHRoaXMudGhpc0VsZW1lbnQpIHtcbiAgICAgIHRoaXMuY3JlYXRlQXV0b2NvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgaGlkZUF1dG9jb21wbGV0ZSA9IChldmVudD86IGFueSk6IHZvaWQgPT4ge1xuICAgIGlmICghdGhpcy5jb21wb25lbnRSZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgIWV2ZW50IHx8XG4gICAgICAoZXZlbnQudGFyZ2V0ICE9PSB0aGlzLnRoaXNFbGVtZW50ICYmIGV2ZW50LnR5cGUgPT09ICdjbGljaycpXG4gICAgKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudFJlZi5kZXN0cm95KCk7XG4gICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXRFbGVtZW50Wyd0YWJJbmRleCddIDwgMCkge1xuICAgICAgdGhpcy5pbnB1dEVsZW1lbnRbJ3RhYkluZGV4J10gPSB0aGlzLnRhYkluZGV4O1xuICAgIH1cbiAgfVxuXG4gIG9uSW5wdXRDaGFuZ2VkID0gKHZhbDogc3RyaW5nKSA9PiB7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUgPSB2YWw7XG4gICAgaWYgKHZhbCAhPT0gdGhpcy5uZ01vZGVsKSB7XG4gICAgICB0aGlzLm5nTW9kZWxDaGFuZ2UuZW1pdCh2YWwpO1xuICAgIH1cbiAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZTtcbiAgICBjb21wb25lbnQuZmlsdGVySXRlbXModmFsKTtcbiAgICB0aGlzLmlucHV0Q2hhbmdlZEV2ZW50LmVtaXQodmFsKTtcbiAgfVxuXG4gIG9uU2VsZWN0ID0gKGl0ZW06IGFueSkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlO1xuICAgIGNvbnN0IHZhbCA9IGNvbXBvbmVudC52YWx1ZTtcbiAgICBpZiAodmFsICE9PSB0aGlzLm5nTW9kZWwpIHtcbiAgICAgIHRoaXMubmdNb2RlbENoYW5nZS5lbWl0KHZhbCk7XG4gICAgfVxuICAgIHRoaXMuc2VsZWN0RXZlbnQuZW1pdChpdGVtKTtcbiAgICBpZiAodGhpcy5pbnB1dEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuaW5wdXRFbGVtZW50LnZhbHVlID0gJycgKyB2YWw7XG4gICAgfVxuICAgIHRoaXMuaGlkZUF1dG9jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVEaXYoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgIHRoaXMudGhpc0VsZW1lbnQucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoXG4gICAgICBlbGVtZW50LFxuICAgICAgdGhpcy50aGlzRWxlbWVudC5uZXh0U2libGluZ1xuICAgICk7XG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRoaXNFbGVtZW50KTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGlkZUF1dG9jb21wbGV0ZSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUF1dG9jb21wbGV0ZSgpIHtcbiAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShcbiAgICAgIEF1dG9jb21wbGV0ZUNvbXBvbmVudFxuICAgICk7XG4gICAgdGhpcy5jb21wb25lbnRSZWYgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnkpO1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlO1xuICAgIGNvbXBvbmVudC5jb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICBjb21wb25lbnQuaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIGNvbXBvbmVudC5zZWxlY3RFdmVudC5zdWJzY3JpYmUodGhpcy5vblNlbGVjdCk7XG4gICAgY29tcG9uZW50LmlucHV0Q2hhbmdlZEV2ZW50LnN1YnNjcmliZSh0aGlzLm9uSW5wdXRDaGFuZ2VkKTtcbiAgICB0aGlzLmF1dG9jb21wbGV0ZUVsZW1lbnQgPSB0aGlzLmNvbXBvbmVudFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50O1xuICAgIHRoaXMuYXV0b2NvbXBsZXRlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy50aGlzRWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGlmICh0aGlzLnRoaXNFbGVtZW50LnRhZ05hbWUgIT09ICdJTlBVVCcgJiYgdGhpcy5hdXRvY29tcGxldGVFbGVtZW50KSB7XG4gICAgICB0aGlzLmlucHV0RWxlbWVudCA9IHRoaXMudGhpc0VsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgJ2lucHV0J1xuICAgICAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgdGhpcy5pbnB1dEVsZW1lbnQucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoXG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlRWxlbWVudCxcbiAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbXBvbmVudC52YWx1ZSA9IHRoaXMuaW5wdXRFbGVtZW50LnZhbHVlO1xuICAgIHRoaXMudGFiSW5kZXggPSB0aGlzLmlucHV0RWxlbWVudFsndGFiSW5kZXgnXTtcbiAgICB0aGlzLmlucHV0RWxlbWVudFsndGFiSW5kZXgnXSA9IC0xMDA7XG4gICAgaWYgKHRoaXMuY29tcG9uZW50UmVmKSB7XG4gICAgICBjb25zdCByZWN0ID0gdGhpcy50aGlzRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHN0eWxlID0gdGhpcy5hdXRvY29tcGxldGVFbGVtZW50LnN0eWxlO1xuICAgICAgc3R5bGUud2lkdGggPSByZWN0LndpZHRoICsgJ3B4JztcbiAgICAgIHN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIHN0eWxlLnpJbmRleCA9ICcxJztcbiAgICAgIHN0eWxlLnRvcCA9ICcwJztcbiAgICAgIHN0eWxlLmxlZnQgPSAnMCc7XG4gICAgICBzdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQXV0b2NvbXBsZXRlQ29tcG9uZW50LCBBdXRvY29tcGxldGVEaXJlY3RpdmUgfSBmcm9tICcuL2F1dG9jb21wbGV0ZS5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZV0sXG4gIGRlY2xhcmF0aW9uczogW0F1dG9jb21wbGV0ZUNvbXBvbmVudCwgQXV0b2NvbXBsZXRlRGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW0F1dG9jb21wbGV0ZUNvbXBvbmVudCwgQXV0b2NvbXBsZXRlRGlyZWN0aXZlXSxcbiAgZW50cnlDb21wb25lbnRzOiBbQXV0b2NvbXBsZXRlQ29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBBdXRvY29tcGxldGVNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEF1dG9jb21wbGV0ZU1vZHVsZVxuICAgIH07XG4gIH1cbn1cblxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0E7Ozs7SUEyRkUsWUFBWSxVQUFzQjsyQkFaUyxJQUFJLFlBQVksRUFBTztpQ0FDakIsSUFBSSxZQUFZLEVBQU87UUFZdEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQzVDLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7S0FDakI7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFdBQVcsR0FBRyxjQUFjLENBQUM7UUFDbEMsSUFBSSxDQUFDLFlBQVks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